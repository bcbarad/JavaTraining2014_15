var app = angular.module('Grabber', ['ngResource']);
/*app.directive('imageonload', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            element.bind('load', function() {
                alert('image is loaded');
            });
        }
    };
});*/
app.controller('Ctrl', function ($scope, $resource) {
	$scope.launch = function () {
      $("#overlay").show();
    	var launchApp = $resource('http://localhost:8080/grabber/launch', {}, {
			  get: {
          method: 'GET',
          transformResponse: function(data, headers){
            return data;
          },
				}
  		});
  		launchApp.get({},function success(data){  		 
  		  $("#launched").show();
        $('#launch').hide();
        $("#overlay").hide();
        console.log("Launched Application Successfully : " + data);
      }, function error(data){
	      $scope.dt = data;
        $("#overlay").hide();
        console.log("Error : " + data);
  		});
	}

  $scope.elementClicked = function(obj){

    $scope.selected = obj;
  }

	$scope.grab = function () {
      $("#overlay").show();
    	var grabElements = $resource('http://localhost:8080/grabber/grab', {}, {
  			get: {
          method: 'GET',
  			}
  		});
  		grabElements.get({},function success(data){
  			$scope.uielements = data.uielements;
        $scope.uiScreen = data.screenshot;
      	//$("#ui-elements").show();
        myInit(); 
        $("#overlay").hide();        
        console.log("Grabbed Successfully : " + data);
      }, function error(data){
        $scope.dt = data;
        $("#overlay").hide();
        console.log("Error : " + data);
		  });
	}

	$scope.kill = function () {
      $("#overlay").show();
    	var killApp = $resource('http://localhost:8080/grabber/kill', {}, {
  			get: {
          method: 'GET',
          transformResponse: function(data, headers){
            return data;
          },
  			}
		  });
  		killApp.get({},function success(data){    	
    		$("#launched").hide();    		
        $('#launch').show();
        $("#overlay").hide();
        console.log("Killed Application Successfully : " + data);
        }, function error(data){
		    $scope.dt = data;
        $("#overlay").hide();
        console.log("Error : " + data);
  		});      			
	}
});

angular.element(document).ready(function() {
  $("#overlay").hide();
	angular.bootstrap(document, ['Grabber']);
});

// stores the device context of the canvas we use to draw the outlines
// initialized in myInit, used in myHover and myLeave
var hdc;

// shorthand func
function byId(e){return document.getElementById(e);}

// takes a string that contains coords eg - "227,307,261,309, 339,354, 328,371, 240,331"
// draws a line from each co-ord pair to the next - assumes starting point needs to be repeated as ending point.

function drawRect(coOrdStr)
{
    var mCoords = coOrdStr.split(',');
    var top, left, bot, right;
    left = mCoords[0];
    top = mCoords[1];
    right = mCoords[2];
    bot = mCoords[3];
    hdc.strokeRect(left,top,right-left,bot-top); 
}

function myHover(element)
{
    var hoveredElement = element;
    var coordStr = element.getAttribute('coords');
    drawRect(coordStr);
}

function myLeave()
{
    var canvas = byId('myCanvas');
    hdc.clearRect(0, 0, canvas.width, canvas.height);
}

function myInit()
{
    // get the target image
    var img = byId('uiScreen');

    var x,y, w,h;

    // get it's position and width+height
    x = img.offsetLeft;
    y = img.offsetTop;
    w = img.clientWidth;
    h = img.clientHeight;

    // move the canvas, so it's contained by the same parent as the image
    var imgParent = img.parentNode;
    var can = byId('myCanvas');
    imgParent.appendChild(can);

    // place the canvas in front of the image
    can.style.zIndex = 1;

    // position it over the image
    can.style.left = x+'px';
    can.style.top = y+'px';

    // make same size as the image
    can.setAttribute('width', w+'px');
    can.setAttribute('height', h+'px');

    // get it's context
    hdc = can.getContext('2d');

    // set the 'default' values for the colour/width of fill/stroke operations
    hdc.globalAlpha = 0.5;
    hdc.fillStyle='red';
    hdc.strokeStyle = 'red';
    hdc.lineWidth = 2;
}